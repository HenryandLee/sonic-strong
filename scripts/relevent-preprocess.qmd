---
title: "relevent-preprocess"
author: "Henry Li"
format: html
editor: visual
---

## Readme

input: ONE sheet of labeled data

output: ONE sheet of data ready for REM analysis

purpose: data-preprocessing with improved replicability and portability

# Pre-processing

```{r setup, include = FALSE}
library(here)
library(dplyr) 
library(tidyr)
```

## replace file directory

```{r}
testdata <- read.csv(here("raw-data", "03_06_2021AM_vero #1_task+team_round 1_otter.ai.csv"))
head(testdata)
```

## 1. Remove NA entries

```{r}
testdata <- testdata %>%
  filter(!is.na(user) & !is.na(to))
```

## 2. List of all participants (excluding Vero)

```{r}
participants <- unique(testdata$user)
participants <- participants[!participants %in% c("Vero", "all")]
```

## 3. List of participants + Vero

```{r}
participants_with_vero <- if("Vero" %in% participants) {
  c("Vero", participants)
} else {
  participants
}
```

## 3.1 Expand "to" column and handle different cases

```{r}
testdata <- testdata %>%
  separate_rows(to, sep = ",") %>%
  mutate(to = gsub("Participant ", "", to),  # Remove "Participant " prefix from "to"
         to = ifelse(to == "0", "Vero", to))  # Replace "0" with "Vero"
```

## 4. Remove "Participant " from user column

```{r}
testdata$user <- gsub("Participant ", "", testdata$user)
```

## 5. Process time and add tiny gaps for sequence

```{r}
testdata <- testdata %>%
  group_by(user, min, sec) %>%
  mutate(sec = sec + (row_number() - 1) * 0.1) %>%
  ungroup()
```

## 6. Handle "all" case and ensure consistent formatting

```{r}
testdata <- testdata %>%
  mutate(to = ifelse(to == "all", paste(participants_with_vero, collapse = ", "), to)) %>%
  separate_rows(to, sep = ", ") %>%
  mutate(to = gsub("Participant ", "", to),  # Remove "Participant " prefix from "to"
         to = ifelse(to == "0", "Vero", to))  # Replace "0" with "Vero"
```

## 7. Convert "min" and "sec" to a single "time" column (in seconds)

```{r}
testdata$time <- testdata$min * 60 + testdata$sec
```

## 8. Add a binary indicator for whether the sender or receiver is "Vero"

```{r}
testdata <- testdata %>%
  mutate(vero_sender = ifelse(user == "Vero", 1, 0),
         vero_receiver = ifelse(to == "Vero", 1, 0))
```

## 9. Final filtering to remove rows where sender and receiver are the same (extra rows we created from "all")

```{r}
testdata <- testdata %>%
  filter(user != to)
```

## 10. Split the sentiments

```{r}
for (i in 1:(nrow(testdata) - 1)) {
  if (grepl("^\\d+,\\d+$", testdata$sentiment[i]) && 
      testdata$sentiment[i] == testdata$sentiment[i + 1]) {
    parts <- strsplit(testdata$sentiment[i], ",")[[1]]
    A <- as.integer(parts[1])
    B <- as.integer(parts[2])
    
    if (A == 0 && B != 0) {
      testdata$sentiment[i] <- ""
      testdata$sentiment[i + 1] <- B
    } else if (A != 0 && B == 0) {
      testdata$sentiment[i] <- A
      testdata$sentiment[i + 1] <- ""
    } else if (A == 0 && B == 0) {
      testdata$sentiment[i] <- ""
      testdata$sentiment[i + 1] <- ""
    } else {
      testdata$sentiment[i] <- A
      testdata$sentiment[i + 1] <- B
    }
  }
}
```

## 11. Prepare data for REM

```{r}
rem_data <- testdata %>%
  select(time, user, to, sentiment,X3rdVero)
names(rem_data) = c("time","sender","receiver","sentiment", "X3rdVero")
rem_data$increment <- 1
```

## 12. (optional) Set initial time to 0

```{r}
rem_data$time = rem_data$time - min(rem_data$time) 
```