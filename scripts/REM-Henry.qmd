---
title: "REM-Henry"
author: "Henry Li"
format: html
editor: visual
---

## Readme

input: ONE sheet of labeled data (in 'perfect' format), from cleaned-data-as-input folder

output: model statistics in the /output folder

purpose:

1.  prepares ONE sheet of data ready for REM analysis (from 'perfect' format);

2.  performs analysis with relevent and export model statistics

-   Please call knitr::purl("REM-Henry.qmd") in console after each revision.

# Pre-processing

```{r setup, include = FALSE}
library(here)
library(dplyr) 
library(tidyr)
library(purrr)
library(relevent)
```

## read the cleaned data (in 'perfect' format) from command line argument

```{r}
# Capture the arguments passed to the script and validate number of arguments
args <- commandArgs(trailingOnly = TRUE)

if (length(args) != 1) {
  stop("Please provide the input file name as an argument.")
}

input_name <- args[1]
file_path <- here("evan-format-input", input_name)
testdata <- read.csv(file_path)
```

## 1. Remove NA entries

```{r}
testdata <- testdata %>%
  filter(!is.na(user) & !is.na(to))
```

## 2. List of all participants (excluding Vero)

```{r}
participants <- unique(testdata$user)
participants <- participants[!participants %in% c("Vero", "all")]
```

## 3. List of participants + Vero

```{r}
participants_with_vero <- if("Vero" %in% participants) {
  c(participants)
} else {
  c("Vero", participants)
}
```

## 4 Expand "to" column and handle labeling with commas

```{r}
testdata <- testdata %>%
  separate_longer_delim(c(to, task_pos, task_conf, rel_pos, rel_conf, X3rdVero), delim = ",")
```

## 5. Remove "Participant " from user column

```{r}
testdata$user <- gsub("Participant ", "", testdata$user)
```

## 6. Process time and add 0.1s increment for simultaneous events

1.  simultaneously addressing more than one recipients

2.  two events happening within one second frame (necessary for well-ordering) (Butts and Marcum 2017:11)

***Let us know if you have better solutions!***

Since `n()` is the number of rows in each group, and `runif` generates a unique random number for each row, the adjusted `time` values will be distinct unless the random number generator happens to produce the same value multiple times, which is highly unlikely given the continuous nature of `runif`. Inclusive of 0.

robustness check: varying seeds only slightly change coefficients. Seems to not change the significance level.

```{r}
set.seed(123)
testdata <- testdata %>%
  group_by(time) %>%
  mutate(time = time + runif(n(), min = 0, max = 0.1)) %>% # check this max = 1
  ungroup() %>%
  arrange(time)
```

## 7. Handle "all" case and ensure consistent formatting

```{r}
testdata <- testdata %>%
  mutate(
    to = if_else(to == "all", "1", to),  # Replace "all" with "1"
    to = as.numeric(to),                 # Convert "to" to numeric
    time = time - min(time)              # Adjust "time" column to 0
  )

map_ids_to_integers <- function(df, from_col, to_col) {
  # Convert specified columns to character type and gather unique IDs
  unique_ids <- df %>%
    select(all_of(c(from_col, to_col))) %>%
    mutate(across(everything(), as.character)) %>%
    unlist() %>%
    unique()
  filtered_ids <- sort(unique_ids[unique_ids != 1 & unique_ids != "Vero" & unique_ids != 0])

# Create the dataframe conditionally based on the number of IDs
  if (length(filtered_ids) == 2) {
    id_rowvec <- data.frame(participant1 = filtered_ids[1], participant2 = filtered_ids[2])} 
  else if (length(filtered_ids) == 3) {
    id_rowvec <- data.frame(participant1 = filtered_ids[1], participant2 = filtered_ids[2], participant3 = filtered_ids[3])} 
  else {
    id_rowvec <- data.frame()}
  print(id_rowvec)
  # Create a mapping of unique IDs to integers
  id_mapping <- tibble(ID = unique_ids, Integer = seq_along(unique_ids))
  
  # Apply the mapping to the specified columns
  df <- df %>%
    mutate(across(all_of(c(from_col, to_col)), ~ id_mapping$Integer[match(.x, id_mapping$ID)]))

  # Return the adjusted df and mapping table
  return(list(adjusted_df = df, mapping_table = id_mapping, id_rowvec = id_rowvec))
}

# Example usage with test data
test_attribute <- tibble(team_id = testdata$Team_id[1], Vero_type = testdata$condition[1])
test_data_run <- tibble(time = testdata$time, from = testdata$user, to = testdata$to)
data_prepared <- map_ids_to_integers(test_data_run, "from", "to")
```

## REM

```{r}
edgelist_df = data_prepared$adjusted_df
mapping_table = data_prepared$mapping_table
id_rowvec = data_prepared$id_rowvec
model1 <- rem.dyad(
  edgelist = edgelist_df ,
  effects = c("RSndSnd", "RRecSnd", "CovSnd","PSAB-BA","PSAB-BY", "PSAB-XA", "PSAB-XB"), 
  n = max(c(edgelist_df$from,edgelist_df$to)),
  covar = list(CovSnd = 1),
  ordinal = FALSE, 
  hessian = TRUE)

# Remember CovSnd.1 is the model intercept
summary(model1)
```

## Export model statistics

```{r}
coef <- model1$par
SE <- sqrt(diag(model1$cov))
z_values <- coef / SE
p_values <- 2 * pnorm(-abs(as.numeric(z_values)))
AIC <- model1$AIC
BIC <- model1$BIC
team_id <- testdata$Team_id[1]
round_number <- testdata$round[1]
Vero_type <- testdata$condition[1]
table <- cbind(Team_ID = team_id, Round_Number = round_number, Covariate = rownames(as.data.frame(model1$coef)), Estimate = coef, SE = SE, Z_value = z_values, p_value = p_values, Significant_at_0.001 = ifelse(p_values < 0.001, TRUE, FALSE), AIC = AIC, BIC = BIC, id_rowvec, Vero_type) # names of covariates

# if (!is.null(table)) {
#   print(head(table))
# }

# output model statistics file
file_name <- paste0("model_coefficients_", team_id, "_round_", round_number, ".csv")
output_file_path <- here::here("output", file_name)
write.csv(table, file = output_file_path, row.names = FALSE)

# Print message
print(id_rowvec)
print(paste("Processed and saved:", file_name))
```
